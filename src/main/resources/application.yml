server:
  port: 8888
  shutdown: graceful                    # 우아한 종료 활성화
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

spring:
  application:
    name: cns-config-service
  lifecycle:
    timeout-per-shutdown-phase: 15s     # 15초의 종료기간을 둔다
  cloud:
    config:
      server:
        git:
          uri: https://github.com/akfnt/cns-config-repo   # 설정 데이터 저장 백엔드로 사용할 원격 깃 저장소의 URL
          default-label: main                             # 서버는 이 설정에 따라 기본적으로 main 브렌치에서 설정 데이터를 반환한다
          timeout: 5                                      # 원격 저장소와의 연결시 시간 한도
          clone-on-start: true                            # 서비스 시작시 리모트 저장소의 복제본을 로컬에 저장
          force-pull: true                                # 로컬 저장본이 원격 저장소와 다를 경우 무조건 원격 저장소로부터 다운로드

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Polar Bookshop      # info 로 시작하는 속성은 info 엔드포인트로 반환된다.

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always       # 애플리케이션의 상세한 상태 정보
      show-components: always   # 애플리케이션이 사용하는 구성 요소에 대한 정보
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}             # 애플리케이션 이름으로 마이크로미터 공통 태그를 추가한다. 이로 인해 모든 매트릭에 적용되는 프로메데우스 레이블이 만들어진다.
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true